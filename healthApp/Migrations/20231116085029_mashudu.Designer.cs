// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using healthApp.Areas.Identity.Data;

#nullable disable

namespace healthApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231116085029_mashudu")]
    partial class mashudu
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("healthApp.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisteredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserRole")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("healthApp.Models.Ambulance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AmbulanceDriverId")
                        .HasColumnType("int");

                    b.Property<string>("AmbulanceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AmbulanceStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AmbulanceDriverId");

                    b.ToTable("Ambulances");
                });

            modelBuilder.Entity("healthApp.Models.AmbulanceDriver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cnic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AmbulanceDrivers");
                });

            modelBuilder.Entity("healthApp.Models.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AnnouncementFor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Announcements")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("healthApp.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("healthApp.Models.Complaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Complain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ComplainDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reply")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("healthApp.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("healthApp.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BloodGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("healthApp.Models.FamilyPlanning.ContraceptionGuideRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ContraceptionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Effectiveness")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SideEffects")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContraceptionGuideRecords");
                });

            modelBuilder.Entity("healthApp.Models.FamilyPlanning.ContraceptionReminder", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<string>("ContraceptionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NextReminderDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReminderDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReminderID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContraceptionReminders");
                });

            modelBuilder.Entity("healthApp.Models.FamilyPlanning.FertilityTrackerRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CycleLength")
                        .HasColumnType("int");

                    b.Property<DateTime>("FertilityWindowEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FertilityWindowStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OvulationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FertilityTrackerRecords");
                });

            modelBuilder.Entity("healthApp.Models.FamilyPlanning.MenstrualCycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MenstrualCycles");
                });

            modelBuilder.Entity("healthApp.Models.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("healthApp.Models.Nutrition.Anthropometry", b =>
                {
                    b.Property<int>("anthroID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("anthroID"), 1L, 1);

                    b.Property<int>("PatientInfoID")
                        .HasColumnType("int");

                    b.Property<double>("armCircumference")
                        .HasColumnType("float");

                    b.Property<double>("bmi")
                        .HasColumnType("float");

                    b.Property<double>("calfCircumference")
                        .HasColumnType("float");

                    b.Property<double>("currentWeight")
                        .HasColumnType("float");

                    b.Property<double>("height")
                        .HasColumnType("float");

                    b.Property<double>("hipCircumference")
                        .HasColumnType("float");

                    b.Property<double>("subscapularSkinFold")
                        .HasColumnType("float");

                    b.Property<double>("tricepSkinFold")
                        .HasColumnType("float");

                    b.Property<double>("usualWeight")
                        .HasColumnType("float");

                    b.Property<double>("waistCircumference")
                        .HasColumnType("float");

                    b.HasKey("anthroID");

                    b.HasIndex("PatientInfoID")
                        .IsUnique();

                    b.ToTable("Antropometry");
                });

            modelBuilder.Entity("healthApp.Models.Nutrition.Biochemicals", b =>
                {
                    b.Property<int>("BioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BioID"), 1L, 1);

                    b.Property<int>("PatientInfoID")
                        .HasColumnType("int");

                    b.Property<string>("SmokingFrequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("albumin")
                        .HasColumnType("float");

                    b.Property<double>("ammonia")
                        .HasColumnType("float");

                    b.Property<double>("amylase")
                        .HasColumnType("float");

                    b.Property<double>("bleedingTime")
                        .HasColumnType("float");

                    b.Property<double>("calcium")
                        .HasColumnType("float");

                    b.Property<double>("cholesterol")
                        .HasColumnType("float");

                    b.Property<double>("clottingTime")
                        .HasColumnType("float");

                    b.Property<double>("globulin")
                        .HasColumnType("float");

                    b.Property<double>("hemoglobin")
                        .HasColumnType("float");

                    b.Property<double>("lipase")
                        .HasColumnType("float");

                    b.Property<double>("magnesium")
                        .HasColumnType("float");

                    b.Property<double>("potassium")
                        .HasColumnType("float");

                    b.Property<double>("sodium")
                        .HasColumnType("float");

                    b.Property<double>("totalProtein")
                        .HasColumnType("float");

                    b.Property<double>("uricAcid")
                        .HasColumnType("float");

                    b.HasKey("BioID");

                    b.HasIndex("PatientInfoID")
                        .IsUnique();

                    b.ToTable("Biochemicals");
                });

            modelBuilder.Entity("healthApp.Models.Nutrition.DietaryInfo", b =>
                {
                    b.Property<int>("DietaryInfoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DietaryInfoID"), 1L, 1);

                    b.Property<double>("AMSnackAmount")
                        .HasColumnType("float");

                    b.Property<string>("AMSnackFood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AMSnackMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AMSnacktotalclories")
                        .HasColumnType("float");

                    b.Property<double>("BreakfastAmount")
                        .HasColumnType("float");

                    b.Property<string>("BreakfastFood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BreakfastMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("BreakfastTotalCalories")
                        .HasColumnType("float");

                    b.Property<double>("DinnerAmount")
                        .HasColumnType("float");

                    b.Property<string>("DinnerFood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DinnerMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DinnerTotalCalories")
                        .HasColumnType("float");

                    b.Property<double>("LunchAmount")
                        .HasColumnType("float");

                    b.Property<string>("LunchFood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LunchMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LunchTotalCalories")
                        .HasColumnType("float");

                    b.Property<double>("PMSnackAmout")
                        .HasColumnType("float");

                    b.Property<string>("PMSnackFood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PMSnackMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PMSnackTotalCalories")
                        .HasColumnType("float");

                    b.Property<int?>("PatientInfoID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("DietaryInfoID");

                    b.HasIndex("PatientInfoID")
                        .IsUnique();

                    b.ToTable("DietaryInfo");
                });

            modelBuilder.Entity("healthApp.Models.Nutrition.FamilyH", b =>
                {
                    b.Property<int>("FamilyHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FamilyHistoryID"), 1L, 1);

                    b.Property<bool?>("Cancer")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<bool?>("CardiovascularDisease")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<bool?>("DiabetesMellitusType1")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<bool?>("DiabetesMellitusType2")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<bool?>("EndocrineDisease")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<bool?>("GastrointestinalDisease")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<bool?>("KidneyDisease")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<bool?>("NeuromuscularDisease")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<int>("PatientInfoID")
                        .HasColumnType("int");

                    b.Property<bool?>("PulmonaryDisease")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.HasKey("FamilyHistoryID");

                    b.HasIndex("PatientInfoID")
                        .IsUnique();

                    b.ToTable("FamilyHistory");
                });

            modelBuilder.Entity("healthApp.Models.Nutrition.FoodExchange", b =>
                {
                    b.Property<int>("FoodExchangeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodExchangeID"), 1L, 1);

                    b.Property<string>("AMSnack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Breakfast")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DietDiscription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DinnerSupper")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lunch")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PMSnack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientInfoID")
                        .HasColumnType("int");

                    b.Property<int>("TotalItems")
                        .HasColumnType("int");

                    b.HasKey("FoodExchangeID");

                    b.HasIndex("PatientInfoID")
                        .IsUnique();

                    b.ToTable("FoodExchange");
                });

            modelBuilder.Entity("healthApp.Models.Nutrition.FoodItems", b =>
                {
                    b.Property<int>("FoodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodID"), 1L, 1);

                    b.Property<double>("Calories")
                        .HasColumnType("float");

                    b.Property<double>("Carbohydrates")
                        .HasColumnType("float");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Fat")
                        .HasColumnType("float");

                    b.Property<double>("Fiber")
                        .HasColumnType("float");

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Minerals")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PatientInfoID")
                        .HasColumnType("int");

                    b.Property<double>("Protein")
                        .HasColumnType("float");

                    b.Property<string>("ServingSize")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Vitamins")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("FoodID");

                    b.ToTable("FoodItems");
                });

            modelBuilder.Entity("healthApp.Models.Nutrition.MacroNutrients", b =>
                {
                    b.Property<int>("MacroID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MacroID"), 1L, 1);

                    b.Property<double>("Cho")
                        .HasColumnType("float");

                    b.Property<double>("Chon")
                        .HasColumnType("float");

                    b.Property<double>("ChongKg")
                        .HasColumnType("float");

                    b.Property<double>("Factor")
                        .HasColumnType("float");

                    b.Property<double>("Fat")
                        .HasColumnType("float");

                    b.Property<int>("KCal")
                        .HasColumnType("int");

                    b.Property<int?>("PatientInfoID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<double>("TeriAbw")
                        .HasColumnType("float");

                    b.Property<double>("TeriCbw")
                        .HasColumnType("float");

                    b.Property<double>("TeriLbw")
                        .HasColumnType("float");

                    b.HasKey("MacroID");

                    b.HasIndex("PatientInfoID")
                        .IsUnique();

                    b.ToTable("MacroNutrients");
                });

            modelBuilder.Entity("healthApp.Models.Nutrition.MedicalH", b =>
                {
                    b.Property<int>("MedicalHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalHistoryID"), 1L, 1);

                    b.Property<string>("FoodAllergies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PastIllness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientInfoID")
                        .HasColumnType("int");

                    b.Property<string>("PresentIllness")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicalHistoryID");

                    b.HasIndex("PatientInfoID")
                        .IsUnique();

                    b.ToTable("MedicalH");
                });

            modelBuilder.Entity("healthApp.Models.Nutrition.PatientInfo", b =>
                {
                    b.Property<int>("PatientInfoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientInfoID"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AttendingDoctor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Citizenship")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dietitian")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NextOfKin")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NextOfKinNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Room")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PatientInfoID");

                    b.ToTable("PatientInfos");
                });

            modelBuilder.Entity("healthApp.Models.Nutrition.Screening", b =>
                {
                    b.Property<int>("ScreeningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScreeningId"), 1L, 1);

                    b.Property<double>("ExtremeBMI")
                        .HasColumnType("float");

                    b.Property<int?>("PatientInfoID")
                        .HasColumnType("int");

                    b.Property<double>("ReducedIntake")
                        .HasColumnType("float");

                    b.Property<int>("RiskScore")
                        .HasColumnType("int");

                    b.Property<double>("SevereIllness")
                        .HasColumnType("float");

                    b.Property<double>("WeightLoss")
                        .HasColumnType("float");

                    b.HasKey("ScreeningId");

                    b.HasIndex("PatientInfoID")
                        .IsUnique()
                        .HasFilter("[PatientInfoID] IS NOT NULL");

                    b.ToTable("Screening");
                });

            modelBuilder.Entity("healthApp.Models.Nutrition.Screening2", b =>
                {
                    b.Property<int>("ScreeningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScreeningId"), 1L, 1);

                    b.Property<double>("ExtremeBMI")
                        .HasColumnType("float");

                    b.Property<int?>("PatientInfoID")
                        .HasColumnType("int");

                    b.Property<double>("ReducedIntake")
                        .HasColumnType("float");

                    b.Property<int>("RiskScore")
                        .HasColumnType("int");

                    b.Property<double>("SevereIllness")
                        .HasColumnType("float");

                    b.Property<double>("WeightLoss")
                        .HasColumnType("float");

                    b.HasKey("ScreeningId");

                    b.HasIndex("PatientInfoID");

                    b.ToTable("Screening2");
                });

            modelBuilder.Entity("healthApp.Models.Nutrition.SGA", b =>
                {
                    b.Property<int>("SgaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SgaID"), 1L, 1);

                    b.Property<double>("AlbuminSGA")
                        .HasColumnType("float");

                    b.Property<double>("BMI")
                        .HasColumnType("float");

                    b.Property<bool>("EdemaPresence")
                        .HasColumnType("bit");

                    b.Property<int>("FoodIntake")
                        .HasColumnType("int");

                    b.Property<int>("FunctionalCapacity")
                        .HasColumnType("int");

                    b.Property<string>("GastrointestinalSymptom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NutritionalRequirementDisease")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientInfoID")
                        .HasColumnType("int");

                    b.Property<string>("PhysicalExam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TIC")
                        .HasColumnType("int");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<double>("WeightLoss")
                        .HasColumnType("float");

                    b.HasKey("SgaID");

                    b.HasIndex("PatientInfoID")
                        .IsUnique();

                    b.ToTable("SGA");
                });

            modelBuilder.Entity("healthApp.Models.Nutrition.SocialH", b =>
                {
                    b.Property<int>("SocialHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SocialHistoryID"), 1L, 1);

                    b.Property<int>("AlcoholFrequency")
                        .HasColumnType("int");

                    b.Property<int>("AlcoholQuantity")
                        .HasColumnType("int");

                    b.Property<string>("AlcoholType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientInfoID")
                        .HasColumnType("int");

                    b.Property<int>("PhysActivity")
                        .HasColumnType("int");

                    b.Property<int>("SmokingFrequency")
                        .HasColumnType("int");

                    b.HasKey("SocialHistoryID");

                    b.HasIndex("PatientInfoID")
                        .IsUnique()
                        .HasFilter("[PatientInfoID] IS NOT NULL");

                    b.ToTable("SocialHistory");
                });

            modelBuilder.Entity("healthApp.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BloodGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("healthApp.Models.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Afternoon1")
                        .HasColumnType("bit");

                    b.Property<bool>("Afternoon2")
                        .HasColumnType("bit");

                    b.Property<bool>("Afternoon3")
                        .HasColumnType("bit");

                    b.Property<bool>("Afternoon4")
                        .HasColumnType("bit");

                    b.Property<bool>("Afternoon5")
                        .HasColumnType("bit");

                    b.Property<bool>("Afternoon6")
                        .HasColumnType("bit");

                    b.Property<bool>("Afternoon7")
                        .HasColumnType("bit");

                    b.Property<int>("CheckUpAfterDays")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorSpecialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorTiming")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Evening1")
                        .HasColumnType("bit");

                    b.Property<bool>("Evening2")
                        .HasColumnType("bit");

                    b.Property<bool>("Evening3")
                        .HasColumnType("bit");

                    b.Property<bool>("Evening4")
                        .HasColumnType("bit");

                    b.Property<bool>("Evening5")
                        .HasColumnType("bit");

                    b.Property<bool>("Evening6")
                        .HasColumnType("bit");

                    b.Property<bool>("Evening7")
                        .HasColumnType("bit");

                    b.Property<string>("MedicalTest1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalTest2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalTest3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalTest4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicine3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicine4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicine5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicine6")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicine7")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Morning1")
                        .HasColumnType("bit");

                    b.Property<bool>("Morning2")
                        .HasColumnType("bit");

                    b.Property<bool>("Morning3")
                        .HasColumnType("bit");

                    b.Property<bool>("Morning4")
                        .HasColumnType("bit");

                    b.Property<bool>("Morning5")
                        .HasColumnType("bit");

                    b.Property<bool>("Morning6")
                        .HasColumnType("bit");

                    b.Property<bool>("Morning7")
                        .HasColumnType("bit");

                    b.Property<string>("PatientAge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientGender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PrescriptionAddDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("healthApp.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AvailableEndDay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AvailableEndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("AvailableStartDay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AvailableStartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimePerPatient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("healthApp.Models.Ambulance", b =>
                {
                    b.HasOne("healthApp.Models.AmbulanceDriver", "AmbulanceDriver")
                        .WithMany()
                        .HasForeignKey("AmbulanceDriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AmbulanceDriver");
                });

            modelBuilder.Entity("healthApp.Models.Appointment", b =>
                {
                    b.HasOne("healthApp.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("healthApp.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("healthApp.Models.Doctor", b =>
                {
                    b.HasOne("healthApp.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("healthApp.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("healthApp.Models.Nutrition.Anthropometry", b =>
                {
                    b.HasOne("healthApp.Models.Nutrition.PatientInfo", "PatientInfo")
                        .WithOne("Anthropometry")
                        .HasForeignKey("healthApp.Models.Nutrition.Anthropometry", "PatientInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientInfo");
                });

            modelBuilder.Entity("healthApp.Models.Nutrition.Biochemicals", b =>
                {
                    b.HasOne("healthApp.Models.Nutrition.PatientInfo", "PatientInfo")
                        .WithOne("Biochemicals")
                        .HasForeignKey("healthApp.Models.Nutrition.Biochemicals", "PatientInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientInfo");
                });

            modelBuilder.Entity("healthApp.Models.Nutrition.DietaryInfo", b =>
                {
                    b.HasOne("healthApp.Models.Nutrition.PatientInfo", "PatientInfo")
                        .WithOne("DietaryInfo")
                        .HasForeignKey("healthApp.Models.Nutrition.DietaryInfo", "PatientInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientInfo");
                });

            modelBuilder.Entity("healthApp.Models.Nutrition.FamilyH", b =>
                {
                    b.HasOne("healthApp.Models.Nutrition.PatientInfo", "PatientInfo")
                        .WithOne("FamilyHistory")
                        .HasForeignKey("healthApp.Models.Nutrition.FamilyH", "PatientInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientInfo");
                });

            modelBuilder.Entity("healthApp.Models.Nutrition.FoodExchange", b =>
                {
                    b.HasOne("healthApp.Models.Nutrition.PatientInfo", "PatientInfo")
                        .WithOne("FoodExchange")
                        .HasForeignKey("healthApp.Models.Nutrition.FoodExchange", "PatientInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientInfo");
                });

            modelBuilder.Entity("healthApp.Models.Nutrition.MacroNutrients", b =>
                {
                    b.HasOne("healthApp.Models.Nutrition.PatientInfo", "PatientInfo")
                        .WithOne("MacroNutrients")
                        .HasForeignKey("healthApp.Models.Nutrition.MacroNutrients", "PatientInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientInfo");
                });

            modelBuilder.Entity("healthApp.Models.Nutrition.MedicalH", b =>
                {
                    b.HasOne("healthApp.Models.Nutrition.PatientInfo", "PatientInfo")
                        .WithOne("MedicalH")
                        .HasForeignKey("healthApp.Models.Nutrition.MedicalH", "PatientInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientInfo");
                });

            modelBuilder.Entity("healthApp.Models.Nutrition.Screening", b =>
                {
                    b.HasOne("healthApp.Models.Nutrition.PatientInfo", "PatientInfo")
                        .WithOne("Screening")
                        .HasForeignKey("healthApp.Models.Nutrition.Screening", "PatientInfoID");

                    b.Navigation("PatientInfo");
                });

            modelBuilder.Entity("healthApp.Models.Nutrition.Screening2", b =>
                {
                    b.HasOne("healthApp.Models.Nutrition.PatientInfo", "PatientInfo")
                        .WithMany()
                        .HasForeignKey("PatientInfoID");

                    b.Navigation("PatientInfo");
                });

            modelBuilder.Entity("healthApp.Models.Nutrition.SGA", b =>
                {
                    b.HasOne("healthApp.Models.Nutrition.PatientInfo", "PatientInfo")
                        .WithOne("SGA")
                        .HasForeignKey("healthApp.Models.Nutrition.SGA", "PatientInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientInfo");
                });

            modelBuilder.Entity("healthApp.Models.Nutrition.SocialH", b =>
                {
                    b.HasOne("healthApp.Models.Nutrition.PatientInfo", "PatientInfo")
                        .WithOne("SocialHistory")
                        .HasForeignKey("healthApp.Models.Nutrition.SocialH", "PatientInfoID");

                    b.Navigation("PatientInfo");
                });

            modelBuilder.Entity("healthApp.Models.Patient", b =>
                {
                    b.HasOne("healthApp.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("healthApp.Models.Prescription", b =>
                {
                    b.HasOne("healthApp.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("healthApp.Models.Patient", "Patient")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("healthApp.Models.Schedule", b =>
                {
                    b.HasOne("healthApp.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("healthApp.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("healthApp.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("healthApp.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("healthApp.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("healthApp.Models.Nutrition.PatientInfo", b =>
                {
                    b.Navigation("Anthropometry");

                    b.Navigation("Biochemicals");

                    b.Navigation("DietaryInfo");

                    b.Navigation("FamilyHistory");

                    b.Navigation("FoodExchange");

                    b.Navigation("MacroNutrients");

                    b.Navigation("MedicalH");

                    b.Navigation("SGA");

                    b.Navigation("Screening");

                    b.Navigation("SocialHistory");
                });

            modelBuilder.Entity("healthApp.Models.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Prescriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
